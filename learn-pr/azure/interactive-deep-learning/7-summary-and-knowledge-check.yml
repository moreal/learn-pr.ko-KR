### YamlMime:ModuleUnit
uid: learn.interactive-deep-learning.7-summary-and-knowledge-check
title: <span data-ttu-id="a9339-101">요약</span><span class="sxs-lookup"><span data-stu-id="a9339-101">Summary</span></span>
metadata:
  title: <span data-ttu-id="a9339-102">요약</span><span class="sxs-lookup"><span data-stu-id="a9339-102">Summary</span></span>
  description: <span data-ttu-id="a9339-103">요약</span><span class="sxs-lookup"><span data-stu-id="a9339-103">Summary</span></span>
  ms.date: 09/24/2018
  author: markjulmar
  ms.author: smmark
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
  ms.openlocfilehash: 2a6f770fc032421778d9b8865ddc2324b1b481e7
  ms.sourcegitcommit: 13f3e790ebb0807e6f2c670bbfffd87ab6dbabdb
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/20/2018
  ms.locfileid: "46484037"
durationInMinutes: 1
content: >
  [!include[](includes/7-summary-and-knowledge-check.md)]
quiz:
  title: <span data-ttu-id="a9339-104">지식 점검</span><span class="sxs-lookup"><span data-stu-id="a9339-104">Check your knowledge</span></span>
  questions:
  - content: <span data-ttu-id="a9339-105">다음 중 딥 러닝을 위해 DSVM을 사용할 때 직면하는 종속성 문제를 가장 잘 설명하는 것은 무엇입니까?</span><span class="sxs-lookup"><span data-stu-id="a9339-105">Which of the following best describes the dependency challenges faced when using the DSVM for deep learning?</span></span>
    choices:
    - content: <span data-ttu-id="a9339-106">DSVM은 샌드박스되므로 새 패키지 설치를 직접 지원하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-106">The DSVM is sandboxed and doesn't provide direct support for installing new packages.</span></span>
      isCorrect: false
      incorrectExplanation: <span data-ttu-id="a9339-107">DSVM은 가상 머신입니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-107">The DSVM is a virtual machine.</span></span> <span data-ttu-id="a9339-108">데이터 과학 및 AI 프로젝트를 지원하기 위해 미리 설치된 많은 소프트웨어가 함께 제공되지만 원하는 항목은 무엇이든 무료로 설치할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-108">It comes with lots of pre-installed software to help with data science and AI project, but you are free to install whatever you want.</span></span>
    - content: <span data-ttu-id="a9339-109">DSVM은 CNTK 및 Cognitive Service 종속성만 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-109">The DSVM only supports CNTK and Cognitive Service dependencies.</span></span>
      incorrectExplanation: <span data-ttu-id="a9339-110">DSVM은 PyTorch, Chainer 및 Tensorflow와 같은 여러 인기 프레임워크를 기본적으로 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-110">DSVMs provide out of the box support for many popular frameworks such as PyTorch, Chainer, and Tensorflow.</span></span>
      isCorrect: false
    - content: <span data-ttu-id="a9339-111">특정 딥 러닝 프레임워크와 패키지에는 다른 환경, GPU 드라이버 및 이진 패키지가 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-111">Certain deep learning frameworks and packages require different enviorments, GPU drivers and binary packages</span></span>
      isCorrect: true
      correctExplanation: <span data-ttu-id="a9339-112">딥 러닝을 위해 사용하는 모든 프레임워크 간의 종속성 관리는 어려울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-112">Managing the dependencies between all the frameworks you are using for deep learning can be a challenge.</span></span> <span data-ttu-id="a9339-113">Docker 컨테이너를 실행하여 이러한 종속성을 그룹화하고 격리하면 이 문제를 해결하는 데 도움이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-113">Running a Docker container to group and isolate these dependencies can help with this challenge.</span></span>
  - content: <span data-ttu-id="a9339-114">Docker 컨테이너에서 딥 러닝 실험을 했다고 가정해 보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-114">Suppose you've been experimenting with deep learning in a Docker container.</span></span> <span data-ttu-id="a9339-115">DSVM은 GPU도 있는 Linux 가상 머신에서 실행되고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-115">Your DSVM is running on a Linux virtual machine that also has GPUs.</span></span> <span data-ttu-id="a9339-116">GPU에서 코드를 실행하기 위해 필요한 구성 요소를 사용하여 컨테이너를 프로비전하려면 다음 중 어느 명령을 사용해야 합니까?</span><span class="sxs-lookup"><span data-stu-id="a9339-116">Which of the followign commands to you run to provision a container with the necessary components to execute code on the GPU.</span></span>
    choices:
    - content: <span data-ttu-id="a9339-117">docker run --useGPU</span><span class="sxs-lookup"><span data-stu-id="a9339-117">docker run --useGPU</span></span>
      isCorrect: false
      incorrectExplanation: <span data-ttu-id="a9339-118">docker run 명령에는 --useGPU 매개 변수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-118">The docker run command does not have a parameter called --useGPU</span></span>
    - content: <span data-ttu-id="a9339-119">nvidia-docker run</span><span class="sxs-lookup"><span data-stu-id="a9339-119">nvidia-docker run</span></span>
      isCorrect: true
      correctExplanation: <span data-ttu-id="a9339-120">이 명령은 GPU를 사용하는 컨테이너를 실행하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-120">This command can be used to execute a container that uses GPUs.</span></span>
    - content: <span data-ttu-id="a9339-121">docker-nvidia run</span><span class="sxs-lookup"><span data-stu-id="a9339-121">docker-nvidia run</span></span>
      isCorrect: false
      incorrectExplanation: <span data-ttu-id="a9339-122">이 명령은 존재하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a9339-122">This command doesn't exist.</span></span>
